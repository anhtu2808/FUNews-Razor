@page
@model FUNewsRazorPages.Pages.Account.ManageAccountModel
@{
    ViewData["Title"] = "Account Management";
}

@section Styles {
    <link rel="stylesheet" href="~/css/accounts.css" />
}

<div class="header-section">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-2">
                <i class="bi bi-people-fill me-2"></i>Account Management
            </h2>
            <p class="mb-0 opacity-75">Manage system users and their roles</p>
        </div>
        <button type="button" class="btn btn-create" data-bs-toggle="modal" data-bs-target="#createAccountModal">
            <i class="bi bi-plus-circle me-2"></i>Create New Account
        </button>
    </div>
</div>

@if (Model.Accounts.Any())
{
    <div class="accounts-table-container">
        <table class="table table-hover mb-0">
            <thead class="accounts-table-header">
                <tr>
                    <th style="width: 25%;">
                        <i class="bi bi-person-fill me-2 text-info"></i>Account Name
                    </th>
                    <th style="width: 25%;">
                        <i class="bi bi-envelope-fill me-2 text-info"></i>Email
                    </th>
                    <th style="width: 15%;">
                        <i class="bi bi-shield-fill me-2 text-info"></i>Role
                    </th>
                    <th style="width: 15%;" class="text-center">
                        <i class="bi bi-circle-fill me-2 text-info"></i>Status
                    </th>
                    <th style="width: 20%;" class="text-center">
                        <i class="bi bi-gear me-2"></i>Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var account in Model.Accounts)
                {
                    <tr class="account-row" data-email="@account.AccountEmail">
                        <td>
                            <div class="account-content">
                                <i class="bi bi-person-circle account-icon"></i>
                                <span class="account-name">@account.AccountName</span>
                            </div>
                        </td>
                        <td>
                            <div class="account-email">
                                @account.AccountEmail
                            </div>
                        </td>
                        <td>
                            <span class="role-badge role-@account.AccountRole.ToString().ToLower()">
                                @Model.GetRoleName(account.AccountRole)
                            </span>
                        </td>
                        <td class="text-center">
                            @if (account.IsOnline)
                            {
                                <span class="status-badge online">
                                    <i class="bi bi-circle-fill me-1"></i>Online
                                </span>
                            }
                            else
                            {
                                <span class="status-badge offline">
                                    <i class="bi bi-circle me-1"></i>Offline
                                </span>
                            }
                        </td>
                        <td class="text-center">
                            <div class="account-actions">
                                <button type="button" class="action-btn edit-btn" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#editAccountModal" 
                                        data-account-id="@account.AccountId"
                                        data-account-name="@account.AccountName"
                                        data-account-email="@account.AccountEmail"
                                        data-account-role="@account.AccountRole"
                                        title="Edit Account">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button type="button" class="action-btn delete-btn" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#deleteAccountModal"
                                        data-account-id="@account.AccountId"
                                        data-account-name="@account.AccountName"
                                        data-account-email="@account.AccountEmail"
                                        title="Delete Account">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="empty-state">
        <i class="bi bi-people display-1 mb-3" style="font-size: 4rem;"></i>
        <h4 class="mb-3">No Accounts Yet</h4>
        <p class="mb-4 opacity-75">Start managing your system by creating user accounts with appropriate roles and permissions.</p>
        <button type="button" class="btn btn-light btn-lg" data-bs-toggle="modal" data-bs-target="#createAccountModal">
            <i class="bi bi-plus-circle me-2"></i>Create Your First Account
        </button>
    </div>
}

@* Include Modal Partials *@
<partial name="_EditModal" />
<partial name="_CreateModal" />
<partial name="_DeleteModal" />

@section Scripts {
    <script src="~/js/accounts.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const currentUserEmail = "@HttpContext.Session.GetString("AccountEmail")";
            
            if (currentUserEmail && window.userHubManager) {
                // Connect to UserHub
                await window.userHubManager.connect(currentUserEmail);
                
                // Listen for user status changes
                window.userHubManager.onUserStatusChanged((changedEmail, isOnline) => {
                    console.log(`User status changed: ${changedEmail} is ${isOnline ? 'online' : 'offline'}`);
                    const row = document.querySelector(`[data-email="${changedEmail}"]`);
                    if (row) {
                        const badge = row.querySelector(".status-badge");
                        if (badge) {
                            if (isOnline) {
                                badge.className = "status-badge online";
                                badge.innerHTML = '<i class="bi bi-circle-fill me-1"></i>Online';
                            } else {
                                badge.className = "status-badge offline";
                                badge.innerHTML = '<i class="bi bi-circle me-1"></i>Offline';
                            }
                        }
                    }
                });
            }
        });
    </script>
}